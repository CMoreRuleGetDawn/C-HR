//1-8 编写一个统计空格，制表符和换行符的程序。
//1-9 编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格代替。
//1-10 编写一个将输入复制到输出的程序，并将其中的制表符替换为\t，把回退符替换为\b，把反斜杠替换为\\，并显示出来。

#include <stdio.h>
#include <stdlib.h>
//#include <malloc.h>
int main()
{
    int c, count_t = 0, count_b = 0, count_sp = 0;
    int size = 5;
    int* array = (int*)malloc(size * sizeof(int));
    int i = 0;
    if (array == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }
    //编写一个统计空格，制表符和换行符的程序。
    printf("enter your texts: \n");
    while ((c = getchar()) != EOF)
    {
        if (c == ' ')
            ++count_sp;

        if (c == '\t')
            ++count_t;

        if (c == '\n')
            ++count_b;

        array[i] = c;
        i++;
    }



    printf("___________________________________\n");
    printf("test texts are: \n");
    for (int j = 0; j < i; j++)
    {
        if (array[j] != EOF)
            putchar(array[j]);
    }
    //编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格代替。
    printf("after eliminate multiple consecutive spaces:\n");
    for (int j = 0; j < i; j++)
    {
        if (array[j] != ' ' || array[j + 1] != ' ')
        {
            if (array[j] != EOF)
                putchar(array[j]);
        }
    }
    //编写一个将输入复制到输出的程序，并将其中的制表符替换为\t，把回退符替换为\b，把反斜杠替换为\\，并显示出来。
    printf("Replaced texts:\n");
    for (int j = 0; j < i; j++)
    {
        if (array[j] == '\t')         
            printf("\\t");
        if (array[j] == '\b')
            printf("\\b");
        if (array[j] == '\\')
            printf("\\\\");
        else
            putchar(array[j]);
    }
    printf("\n");
    printf("Amount of Space:%d, Table:%d, Return:%d ", count_sp, count_t, count_b);
    free(array);
}
---------------------------------------------------------------------------------------------------------------------
//1-12 编写一个程序，以每行一个单词的形式打印其输出

#include <stdio.h>
#define OUT 0
#define IN 1
void main() {
	int c;
	int state = OUT;
	printf("please enter your texts:\n");
	while ((c = getchar()) != EOF)
	{
		if (c == ' ' || c == '\t' || c == '\n')
		{
			state = OUT;
		}
		else if (state == OUT || state == IN)
		{
			if ((state - IN) == -1)
				putchar('\n');
			state = IN;
			putchar(c);
		}

	}
}
----------------------------------------------------------------------------------------------------------------------
//1-13 编写一个程序，打印输入中单词长度的直方图（垂直方向）、、
//参考:https://blog.csdn.net/weixin_45694790/article/details/105369940
#include <stdio.h>

main()
{
    int ch;
    int bh;
    long i;
    long j;
    int last_white = 0;//记上一个字符为空白字符
    int last_letter = 0;//记上一个字符为字母
    int start_letter = 1;//记单词开始
    int wordlen = 0;//单词长度计数器
    int n_letter = 0;//1-10、10+ 的单词个数
    long max;//相同长度出现次数最多的值
    long n_wordlen[10];//储存1-10、10+的单词个数

    for (i = 0; i < 10; i++)//将数组元素设置为0,用于累加存储单词长度的个数
        n_wordlen[i] = 0;
    /*求单词的各个长度的数量*/
    while ((ch = getchar()) != EOF) {
        if (ch == '\n' || ch == ' ' || ch == '\t') {
            start_letter = 1;//记单词开始
            if (last_white)
                last_letter = 0;
            if (last_letter) {
                if (bh == '#')//不将退出符号'#'计入长度
                    wordlen -= 1;
                if (wordlen < 11)//单词长度小于等于10, n_wordlen[0] + 1
                    ++n_wordlen[wordlen - 1];
                else if (wordlen > 10)//单词长大于10， n_wordlen[10] + 1
                    printf("单词长度异常");
                wordlen = 0; //单词长度计数器清零
                last_white = 0;//记单词结束，
                if (bh == '#')//退出while循环
                    break;
            }
        }
        else if (start_letter) {
            ++wordlen;
            last_letter = 1;
            bh = ch;
        }
    }
    /*求最大值*/
    max = n_wordlen[0];
    for (i = 1; i < 11; i++)
        if (n_wordlen[i] > max)
            max = n_wordlen[i];
    /*绘制图像*/
    printf("\n            xx直方图\n      A\n      |\n");
    for (i = max; i > 0; i--) {//竖向直方图
        printf("%5ld |", i);
        for (j = 0; j < 11; j++) {
            if (n_wordlen[j] == i) {
                printf(" #");//1
                --n_wordlen[j];
            }
            else
                printf("  ");//2
        }
        printf("\n");
    }
    //绘制最后两行
    printf("      +");//6
    for (i = 0; i < 12; i++)
        printf("--");
    printf("->\n    0  ");//4; 2
    for (i = 1; i < 11; i++)
        printf(" %ld", i);
    printf(" 10+\n");
}
---------------------------------------------------------------------------------------------------
//1-14 编写一个程序，打印输入中各个字符出现频度的直方图

#include <stdio.h>

int main() {
	int c = 0;
	int other=0,dig = 0;
	int arr[28];
	for (int i = 0; i < 28; i++)
		arr[i] = 0;
	
	//输入测试用例
	while ((c = getchar()) != EOF) {
		if (c == ' ' || c == '\t' || c == '\n') {
			other++;
		}
			
		if (48 <= c && c <= 57){
			dig++;
		}
			
		if (97 <= c && c <= 122) {
			for (int i = 0; i < 26; i++) {
				if ((c - 97) == i) {
					arr[i]++;
					break;
				}

			}
		}
		else if (65 <= c && c <= 90) {
			for (int i = 0; i < 26; i++) {
				if ((c - 65) == i) {
					arr[i]++;
					break;
				}

			}
		}
	}
	arr[26] = other;
	arr[27] = dig;
	//计算最高频度
	int temp = 0;
	for (int i = 0; i < 28; i++) {
		temp = arr[0];
		if (arr[i] >= temp)
			temp = arr[i];
	}

	//打印频度直方图
	printf("\n             频度图                 \n");
	printf("     A\n     |\n");
	for (int i = temp; i > 0; i--) {
		printf("%4d |",i);
		for (int j = 0; j < 28; j++) {
			if (arr[j] == i) {
				printf("  #");
				arr[j] = arr[j] - 1;
			}
			else
				printf("   ");
		}
		printf("\n");

	}
	printf("     +");
	for(int n=0;n<=45;n++)
		printf("--");//
	printf("->\n      ");
	for (int k = 97; k <= 122; k++) {
		printf("  ");
		putchar(k);
	}
	printf(" ot");
	printf(" di");
		
}
