//1-8 编写一个统计空格，制表符和换行符的程序。
//1-9 编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格代替。
//1-10 编写一个将输入复制到输出的程序，并将其中的制表符替换为\t，把回退符替换为\b，把反斜杠替换为\\，并显示出来。

#include <stdio.h>
#include <stdlib.h>
//#include <malloc.h>
int main()
{
    int c, count_t = 0, count_b = 0, count_sp = 0;
    int size = 5;
    int* array = (int*)malloc(size * sizeof(int));
    int i = 0;
    if (array == NULL) {
        printf("Memory allocation failed.\n");
        return 1;
    }
    //编写一个统计空格，制表符和换行符的程序。
    printf("enter your texts: \n");
    while ((c = getchar()) != EOF)
    {
        if (c == ' ')
            ++count_sp;

        if (c == '\t')
            ++count_t;

        if (c == '\n')
            ++count_b;

        array[i] = c;
        i++;
    }



    printf("___________________________________\n");
    printf("test texts are: \n");
    for (int j = 0; j < i; j++)
    {
        if (array[j] != EOF)
            putchar(array[j]);
    }
    //编写一个将输入复制到输出的程序，并将其中连续的多个空格用一个空格代替。
    printf("after eliminate multiple consecutive spaces:\n");
    for (int j = 0; j < i; j++)
    {
        if (array[j] != ' ' || array[j + 1] != ' ')
        {
            if (array[j] != EOF)
                putchar(array[j]);
        }
    }
    //编写一个将输入复制到输出的程序，并将其中的制表符替换为\t，把回退符替换为\b，把反斜杠替换为\\，并显示出来。
    printf("Replaced texts:\n");
    for (int j = 0; j < i; j++)
    {
        if (array[j] == '\t')         
            printf("\\t");
        if (array[j] == '\b')
            printf("\\b");
        if (array[j] == '\\')
            printf("\\\\");
        else
            putchar(array[j]);
    }
    printf("\n");
    printf("Amount of Space:%d, Table:%d, Return:%d ", count_sp, count_t, count_b);
    free(array);
}
---------------------------------------------------------------------------------------------------------------------
//1-12 编写一个程序，以每行一个单词的形式打印其输出。

#include <stdio.h>
#define OUT 0
#define IN 1
void main() {
	int c;
	int state = OUT;
	printf("please enter your texts:\n");
	while ((c = getchar()) != EOF)
	{
		if (c == ' ' || c == '\t' || c == '\n')
		{
			state = OUT;
		}
		else if (state == OUT || state == IN)
		{
			if ((state - IN) == -1)
				putchar('\n');
			state = IN;
			putchar(c);
		}

	}
}
----------------------------------------------------------------------------------------------------------------------
//1-13 编写一个程序，打印输入中单词长度的直方图（垂直方向）。
//参考:https://blog.csdn.net/weixin_45694790/article/details/105369940
#include <stdio.h>

main()
{
    int ch;
    int bh;
    long i;
    long j;
    int last_white = 0;//记上一个字符为空白字符
    int last_letter = 0;//记上一个字符为字母
    int start_letter = 1;//记单词开始
    int wordlen = 0;//单词长度计数器
    int n_letter = 0;//1-10、10+ 的单词个数
    long max;//相同长度出现次数最多的值
    long n_wordlen[10];//储存1-10、10+的单词个数

    for (i = 0; i < 10; i++)//将数组元素设置为0,用于累加存储单词长度的个数
        n_wordlen[i] = 0;
    /*求单词的各个长度的数量*/
    while ((ch = getchar()) != EOF) {
        if (ch == '\n' || ch == ' ' || ch == '\t') {
            start_letter = 1;//记单词开始
            if (last_white)
                last_letter = 0;
            if (last_letter) {
                if (bh == '#')//不将退出符号'#'计入长度
                    wordlen -= 1;
                if (wordlen < 11)//单词长度小于等于10, n_wordlen[0] + 1
                    ++n_wordlen[wordlen - 1];
                else if (wordlen > 10)//单词长大于10， n_wordlen[10] + 1
                    printf("单词长度异常");
                wordlen = 0; //单词长度计数器清零
                last_white = 0;//记单词结束，
                if (bh == '#')//退出while循环
                    break;
            }
        }
        else if (start_letter) {
            ++wordlen;
            last_letter = 1;
            bh = ch;
        }
    }
    /*求最大值*/
    max = n_wordlen[0];
    for (i = 1; i < 11; i++)
        if (n_wordlen[i] > max)
            max = n_wordlen[i];
    /*绘制图像*/
    printf("\n            xx直方图\n      A\n      |\n");
    for (i = max; i > 0; i--) {//竖向直方图
        printf("%5ld |", i);
        for (j = 0; j < 11; j++) {
            if (n_wordlen[j] == i) {
                printf(" #");//1
                --n_wordlen[j];
            }
            else
                printf("  ");//2
        }
        printf("\n");
    }
    //绘制最后两行
    printf("      +");//6
    for (i = 0; i < 12; i++)
        printf("--");
    printf("->\n    0  ");//4; 2
    for (i = 1; i < 11; i++)
        printf(" %ld", i);
    printf(" 10+\n");
}
---------------------------------------------------------------------------------------------------
//1-14 编写一个程序，打印输入中各个字符出现频度的直方图。

#include <stdio.h>

int main() {
	int c = 0;
	int other=0,dig = 0;
	int arr[28];
	for (int i = 0; i < 28; i++)
		arr[i] = 0;
	
	//输入测试用例
	while ((c = getchar()) != EOF) {
		if (c == ' ' || c == '\t' || c == '\n') {
			other++;
		}
			
		if (48 <= c && c <= 57){
			dig++;
		}
			
		if (97 <= c && c <= 122) {
			for (int i = 0; i < 26; i++) {
				if ((c - 97) == i) {
					arr[i]++;
					break;
				}

			}
		}
		else if (65 <= c && c <= 90) {
			for (int i = 0; i < 26; i++) {
				if ((c - 65) == i) {
					arr[i]++;
					break;
				}

			}
		}
	}
	arr[26] = other;
	arr[27] = dig;
	//计算最高频度
	int temp = 0;
	for (int i = 0; i < 28; i++) {
		temp = arr[0];
		if (arr[i] >= temp)
			temp = arr[i];
	}

	//打印频度直方图
	printf("\n             频度图                 \n");
	printf("     A\n     |\n");
	for (int i = temp; i > 0; i--) {
		printf("%4d |",i);
		for (int j = 0; j < 28; j++) {
			if (arr[j] == i) {
				printf("  #");
				arr[j] = arr[j] - 1;
			}
			else
				printf("   ");
		}
		printf("\n");

	}
	printf("     +");
	for(int n=0;n<=45;n++)
		printf("--");//
	printf("->\n      ");
	for (int k = 97; k <= 122; k++) {
		printf("  ");
		putchar(k);
	}
	printf(" ot");
	printf(" di");
		
}
---------------------------------------------------------------------------------------------------
//1-15 使用函数实现温度转换计算。
#include <stdio.h>
void FaToCe(int f);
void main() {
	int fahr, celsius;
	int lower, upper, step;
	lower = 0;
	upper = 300;
	step = 20;

	fahr = lower;
	while(fahr <= upper){
		FaToCe(fahr);
		fahr += step;
	}
	return ;
}

void FaToCe(int fa) {
	int celsius;
	celsius = 5 * (fa - 32) / 9;
	printf("%d\t%d\n",fa,celsius);
}
---------------------------------------------------------------------------------------------------
//1-16 修改打印最长文本行的程序的主程序main,使之可以打印任意长度的输入行的长度，并尽可能多的打印文本。（如果是需要打印每行的字符数且打印每一行，那就非常简单）
#include <stdio.h>
#include <stdlib.h>
#define MAXLINE 1000

int getline(char line[], int maxline);
void copy(char to[], char from[]);

int main() {
    int len, max = 0;
    int newsize = 0;
    int acount = 0;//动态分配的数组的下标
    int temp = 0;
    char line[MAXLINE];
    char longest[MAXLINE];

    char* longp = (char*)malloc(MAXLINE * sizeof(char));
    char* linep = (char*)malloc(MAXLINE * sizeof(char));

    if (longp == NULL || linep == NULL) {
        fprintf(stderr, "Memory allocation failed\n");
        return 1;
    }
    
    while ((len = getline(line, MAXLINE)) > 0) {
       //计算输入行的字符数是否超过保存输入行内容的数组，数组空间不足则动态分配更多的内存
       //直至数组空间足够保存输入的输入行的每个字符，以实现打印任意长度输入行。
        if (len == (MAXLINE - 1) && line[MAXLINE - 2] != '\n') {
            newsize = newsize + 1100;
            linep = (char*)realloc(linep, newsize * sizeof(char));
            if (linep == NULL) {
                fprintf(stderr, "Memory reallocation failed\n");
                return 1;
            }
            for (int i = 0; i < len; i++) {
                linep[acount] = line[i];
                acount++;
            }
            if (linep[acount - 1] != '\n');
                continue;    
        }
        else {
            for (int i = 0; i < len; i++) {
                linep[acount] = line[i];
                acount++;
            }
            linep[acount] = '\0';
            temp = acount;
            acount = 0;
        }
        //判断临时保存最长行的数组够不够长，如果不足则适配长度动态分配
        if (temp - 1 > max) {
            max = temp - 1;
            if (temp > sizeof(char)*MAXLINE) {
                longp = (char*)realloc(longest, (max + 1) * sizeof(char));
                if (longp == NULL) {
                    fprintf(stderr, "Memory reallocation failed\n");
                    return 1;
                }
            }
        copy(longp, linep);
     
        }
              
    }
    if(max>0)
        printf("%s", longp);
        
    free(linep);//释放内存
    free(longp);//释放内存
    return 0;

        
}


    


int getline(char s[], int lim) {
    int c, i;
    for (i = 0; i < lim - 1 && (c = getchar()) != EOF && c != '\n'; ++i) {
        s[i] = c;
    }
    if (c == '\n') {
        s[i] = c;
        ++i;
    }
    s[i] = '\0';
    return i;
}

void copy(char to[], char from[]) {
    int i = 0;
    while ((to[i] = from[i]) != '\0') {
        ++i;
    }
}
---------------------------------------------------------------------------------------------------
//1-17 编写程序，打印长度大于80个字符的所有输入行（10个字符为例）
#include <stdio.h>
#include <stdlib.h>
int getline(char* line, int num);
void print_line(char* line);
int copy(char* to, char* from,int index);
int save_index = 0; 
int c_index = 0;
int main() {
	char* line = (char*)malloc(500 * sizeof(char));
	char* save_arr = (char*)malloc(2000 * sizeof(char));
	if (line == NULL) {
		printf("Memory reallocation failed\n");
		return 1;
	}
	if (save_arr == NULL) {
		printf("Memory reallocation failed\n");
		return 1;
	}
	int len;
	int sign;

	while ((len = getline(line, 500)) > 0) {
		if (len <= 10)
			sign = 1;
		else
			sign = 2;

		switch (sign) {
		case 1:
			continue;
		case 2:
			save_index += len;
			copy(save_arr, line, save_index);
			continue;
		}
	}
	save_arr[save_index] = '\0';
	printf("----------------------------------------\n");
	printf("lines exceeding 10 characters.：\n");
	print_line(save_arr);

	free(line);
	free(save_arr);
	return 1;
}
//获取输入行
int getline(char* line, int num) {
	int c = 0, i;
	for (i = 0; i < num - 1 && (c = getchar()) != EOF && c != '\n'; i++)
		line[i] = c;
	if (c == '\n') {
		line[i] = '\n';
		i++;
	}
	line[i] = '\0';
	return i;
}
//输出满足要求的行
void print_line(char* line){
	char* p = line;
	printf("%s",p);
	//printf("\n");
}
//将满足要求的行加入到数组中
int copy(char* to, char* from,int index) {
	int i = 0;
	for (; c_index < index; c_index++, i++)
		to[c_index] = from[i];
	
	return 1;
}
---------------------------------------------------------------------------------------------------
//1-18 编写程序，删除每个输入行末尾的空格及制表符，并删除完全是空格的行(为了可视化将空格转换为0，制表符转换为1)
#include <stdio.h>
#include <stdlib.h>
int save_index = 0;
void copy(char* to, char* from, int len);
int getline(char* line);

int main() {
	int len = 0;
	char* line = (char*)malloc(500 * sizeof(char));
	char* save_line = (char*)malloc(1000 * sizeof(char));
	if (line == NULL || save_line == NULL) {
		printf("Memory allocation failed.");
			return -1;
	}
	int len_tag;

	while ((len = getline(line)) + 1) {
		if (len == 1)
			len_tag = 0;
		else
			len_tag = 1;

		switch (len_tag) {
		case 0:
			continue;
		case 1:
			copy(save_line,line,len);			
		}
	}
	save_line[save_index] = '\0';
	printf("Processed datas: \n");
	printf("%s", save_line);

	free(line);
	free(save_line);
	return 1;
}
//获取输入行
int getline(char *line) {
	int c = 0;//接受缓冲区输入字符
	int i = 0;
	int tag = 0;
	for (; (c = getchar())!= '\n'; i++) {
		if (c == EOF)
			return -1;
		else if (c == '0' || c == '1')
			tag++;
		else 
			tag = 0;
		line[i] = c;
	}
	if (tag == 0) {
		line[i++] = '\n';
		line[i]='\0';
		return i;
	}
	else {
		line[i - tag] = '\n';
		line[i - tag + 1] = '\0';
		return i - tag + 1;
	}
}
//将输入存储到数组中
void copy(char* to, char* from,int len) {
	int i;
	for (i = 0; i < len; i++,save_index++)
		to[save_index] = from[i];
}
---------------------------------------------------------------------------------------------------
//1-19 编写函数reverse（s），将字符串s中的字符顺序颠倒过来。使用该函数编写一个程序，每次颠倒一个输入行中的字符顺序
#include <stdio.h>
#include <stdlib.h>

void reverse(char* r_line, int n);
int getline(char* line);

int main() {
	char* line = (char*)malloc(100 * sizeof(char));
	int len = 0;
	while ((len = getline(line)) != 0) {
		printf("reversed datas:\n");
		reverse(line, len);
		printf("%s",line);
	}
	free(line);
	return 1;
}

void reverse(char* r_line, int n) {
	char temp;
	int i;
	for (i = 0; i <= (n-2) / 2; i++) {
		temp = r_line[i];
		r_line[i] = r_line[n - i - 2];
		r_line[n - i - 2] = temp;
	}
}

int getline(char* line) {
	int c, i;
	for (i = 0; (c = getchar()) != EOF && c != '\n'; i++)
		line[i] = c;
	if (c == '\n') {
		line[i] = '\n';
		i++;
	}
	line[i] = '\0';
	return i;
}
